{
	"name": "pl_pet_to_stage",
	"properties": {
		"activities": [
			{
				"name": "cp_pet_to_stage",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Script1",
						"dependencyConditions": [
							"Skipped"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "SnowflakeV2Sink",
						"preCopyScript": "TRUNCATE TABLE PET_LICENSE_DB.STAGE.STG_PET_LICENSE;\n",
						"importSettings": {
							"type": "SnowflakeImportCopyCommand"
						}
					},
					"enableStaging": true,
					"stagingSettings": {
						"linkedServiceName": {
							"referenceName": "ls_blob_pet_mi",
							"type": "LinkedServiceReference"
						},
						"path": "input"
					},
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "License Issue Date",
									"type": "String"
								},
								"sink": {
									"name": "LICENSE_ISSUE_DATE",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "License Number",
									"type": "String"
								},
								"sink": {
									"name": "LICENSE_NUMBER",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "Animal's Name",
									"type": "String"
								},
								"sink": {
									"name": "ANIMAL_NAME",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "Species",
									"type": "String"
								},
								"sink": {
									"name": "SPECIES",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "Primary Breed",
									"type": "String"
								},
								"sink": {
									"name": "PRIMARY_BREED",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "Secondary Breed",
									"type": "String"
								},
								"sink": {
									"name": "SECONDARY_BREED",
									"type": "String"
								}
							},
							{
								"source": {
									"name": "ZIP Code",
									"type": "String"
								},
								"sink": {
									"name": "ZIP_CODE",
									"type": "String"
								}
							}
						]
					}
				},
				"inputs": [
					{
						"referenceName": "ls_blob_pet_csv",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "ds_sf_stage_pet_raw",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "Script1",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "ls_snowflake_pet",
					"type": "LinkedServiceReference",
					"parameters": {
						"insecureMode": "true"
					}
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "-- ================================\n-- ADF Script Activity: DW Loads\n-- ================================\nUSE WAREHOUSE PET_WH;\nUSE DATABASE PET_LICENSE_DB;\n\n-- =========================================\n-- 1) LOCATION_DIM upsert from STG_LOCATION_LKP\n-- =========================================\nMERGE INTO DW.LOCATION_DIM D\nUSING (\n  SELECT\n    UPPER(TRIM(ZIP_CODE))                                        AS ZIP_N,\n    UPPER(TRIM(CITY_NAME))                                       AS CITY_N,\n    CASE WHEN STATE_CODE IS NULL OR TRIM(STATE_CODE) = ''\n         THEN 'WA' ELSE UPPER(TRIM(STATE_CODE)) END              AS STATE_N,\n    'USA'                                                        AS COUNTRY_N,\n    MD5(\n      UPPER(TRIM(ZIP_CODE)) || '|' ||\n      UPPER(TRIM(CITY_NAME)) || '|' ||\n      CASE WHEN STATE_CODE IS NULL OR TRIM(STATE_CODE) = ''\n           THEN 'WA' ELSE UPPER(TRIM(STATE_CODE)) END\n    )                                                            AS NK_HASH\n  FROM STAGE.STG_LOCATION_LKP\n  WHERE ZIP_CODE IS NOT NULL\n) S\nON D.NATURAL_KEY_HASH = S.NK_HASH\nWHEN MATCHED THEN UPDATE SET\n  D.ZIP_CODE      = S.ZIP_N,\n  D.CITY_NAME     = S.CITY_N,\n  D.STATE_CODE    = S.STATE_N,\n  D.COUNTRY_CODE  = S.COUNTRY_N\nWHEN NOT MATCHED THEN INSERT\n  (ZIP_CODE, CITY_NAME, STATE_CODE, COUNTRY_CODE, NATURAL_KEY_HASH)\nVALUES\n  (S.ZIP_N, S.CITY_N, S.STATE_N, S.COUNTRY_N, S.NK_HASH);\n\n-- =========================================\n-- 2) BREED_DIM upsert from STG_PET_LICENSE\n-- =========================================\nMERGE INTO DW.BREED_DIM D\nUSING (\n  SELECT\n    UPPER(TRIM(SPECIES))                                         AS SPEC_N,\n    UPPER(TRIM(PRIMARY_BREED))                                   AS PB_N,\n    CASE WHEN SECONDARY_BREED IS NULL OR TRIM(SECONDARY_BREED)=''\n         THEN 'UNKNOWN' ELSE UPPER(TRIM(SECONDARY_BREED)) END    AS SB_N,\n    MD5(\n      UPPER(TRIM(SPECIES)) || '|' ||\n      UPPER(TRIM(PRIMARY_BREED)) || '|' ||\n      CASE WHEN SECONDARY_BREED IS NULL OR TRIM(SECONDARY_BREED)=''\n           THEN 'UNKNOWN' ELSE UPPER(TRIM(SECONDARY_BREED)) END\n    )                                                            AS NK_HASH\n  FROM STAGE.STG_PET_LICENSE\n) S\nON D.NATURAL_KEY_HASH = S.NK_HASH\nWHEN MATCHED THEN UPDATE SET\n  D.SPECIES_NAME    = S.SPEC_N,\n  D.PRIMARY_BREED   = S.PB_N,\n  D.SECONDARY_BREED = S.SB_N\nWHEN NOT MATCHED THEN INSERT\n  (SPECIES_NAME, PRIMARY_BREED, SECONDARY_BREED, NATURAL_KEY_HASH)\nVALUES\n  (S.SPEC_N, S.PB_N, S.SB_N, S.NK_HASH);\n\n-- =========================================\n-- 3) DATE_DIM upsert (derived from staged issue dates)\n-- =========================================\nMERGE INTO DW.DATE_DIM T\nUSING (\n  SELECT\n    TO_NUMBER(TO_CHAR(D,'YYYYMMDD')) AS DATE_KEY,\n    D                                AS FULL_DATE,\n    YEAR(D)                          AS YEAR_NUM,\n    QUARTER(D)                       AS QUARTER_NUM,\n    MONTH(D)                         AS MONTH_NUM,\n    TO_CHAR(D,'Month')               AS MONTH_NAME,\n    DAY(D)                           AS DAY_NUM\n  FROM (\n    SELECT DISTINCT TO_DATE(LICENSE_ISSUE_DATE, 'MM/DD/YYYY') AS D\n    FROM STAGE.STG_PET_LICENSE\n    WHERE LICENSE_ISSUE_DATE IS NOT NULL\n  )\n) S\nON T.DATE_KEY = S.DATE_KEY\nWHEN MATCHED THEN UPDATE SET\n  T.FULL_DATE   = S.FULL_DATE,\n  T.YEAR_NUM    = S.YEAR_NUM,\n  T.QUARTER_NUM = S.QUARTER_NUM,\n  T.MONTH_NUM   = S.MONTH_NUM,\n  T.MONTH_NAME  = S.MONTH_NAME,\n  T.DAY_NUM     = S.DAY_NUM\nWHEN NOT MATCHED THEN INSERT\n  (DATE_KEY, FULL_DATE, YEAR_NUM, QUARTER_NUM, MONTH_NUM, MONTH_NAME, DAY_NUM)\nVALUES\n  (S.DATE_KEY, S.FULL_DATE, S.YEAR_NUM, S.QUARTER_NUM, S.MONTH_NUM, S.MONTH_NAME, S.DAY_NUM);\n\n-- =========================================\n-- 4) FACT MERGE (idempotent on LICENSE_ID + DATE_KEY)\n-- =========================================\nMERGE INTO DW.PETLICENSE_FACT F\nUSING (\n  SELECT\n    S.LICENSE_NUMBER,\n    S.ANIMAL_NAME,\n    S.DATE_KEY,\n    L2.LOCATION_DIM_KEY,\n    B.BREED_DIM_KEY,\n    S.CNT\n  FROM (\n    SELECT\n      LICENSE_NUMBER,\n      ANIMAL_NAME,\n      TO_NUMBER(TO_CHAR(TO_DATE(LICENSE_ISSUE_DATE,'MM/DD/YYYY'),'YYYYMMDD')) AS DATE_KEY,\n      UPPER(TRIM(ZIP_CODE))                                              AS ZIP_N,\n      MD5(\n        UPPER(TRIM(SPECIES)) || '|' ||\n        UPPER(TRIM(PRIMARY_BREED)) || '|' ||\n        CASE WHEN SECONDARY_BREED IS NULL OR TRIM(SECONDARY_BREED)=''\n             THEN 'UNKNOWN' ELSE UPPER(TRIM(SECONDARY_BREED)) END\n      )                                                                  AS BREED_HASH,\n      1                                                                  AS CNT\n    FROM STAGE.STG_PET_LICENSE\n  ) S\n  JOIN DW.LOCATION_DIM L2\n    ON S.ZIP_N = UPPER(TRIM(L2.ZIP_CODE))\n  JOIN DW.BREED_DIM B\n    ON S.BREED_HASH = B.NATURAL_KEY_HASH\n) S\nON F.LICENSE_ID = S.LICENSE_NUMBER\n   AND F.DATE_KEY = S.DATE_KEY\nWHEN MATCHED THEN UPDATE SET\n  F.LOCATION_DIM_KEY = S.LOCATION_DIM_KEY,\n  F.BREED_DIM_KEY    = S.BREED_DIM_KEY,\n  F.PET_NAME         = S.ANIMAL_NAME,\n  F.CNT              = S.CNT\nWHEN NOT MATCHED THEN INSERT\n  (DATE_KEY, LOCATION_DIM_KEY, BREED_DIM_KEY, LICENSE_ID, PET_NAME, CNT)\nVALUES\n  (S.DATE_KEY, S.LOCATION_DIM_KEY, S.BREED_DIM_KEY, S.LICENSE_NUMBER, S.ANIMAL_NAME, S.CNT);"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"annotations": [],
		"lastPublishTime": "2025-10-15T04:26:36Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}
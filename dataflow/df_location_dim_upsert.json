{
	"name": "df_location_dim_upsert",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sf_stage_loc_raw",
						"type": "DatasetReference"
					},
					"name": "dflocationdimupsert"
				},
				{
					"dataset": {
						"referenceName": "ds_sf_stage_pet_raw",
						"type": "DatasetReference"
					},
					"name": "dssfstagepetraw"
				},
				{
					"dataset": {
						"referenceName": "ds_sf_stage_pet_raw",
						"type": "DatasetReference"
					},
					"name": "dffactload"
				},
				{
					"dataset": {
						"referenceName": "ds_sf_dw_location",
						"type": "DatasetReference"
					},
					"name": "LOCATIONDIM"
				},
				{
					"dataset": {
						"referenceName": "ds_sf_dw_breed",
						"type": "DatasetReference"
					},
					"name": "DIMBREED"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sf_stage_pet_raw",
						"type": "DatasetReference"
					},
					"name": "sink4"
				},
				{
					"dataset": {
						"referenceName": "ds_sf_dw_location",
						"type": "DatasetReference"
					},
					"name": "sink5"
				},
				{
					"dataset": {
						"referenceName": "ds_sf_dw_fact",
						"type": "DatasetReference"
					},
					"name": "sink6"
				}
			],
			"transformations": [
				{
					"name": "dfbreeddimupsert"
				},
				{
					"name": "derivebreedkeys"
				},
				{
					"name": "alterRow"
				},
				{
					"name": "derivedcols"
				},
				{
					"name": "derivefactcols"
				},
				{
					"name": "BreedDim"
				},
				{
					"name": "locnorm"
				},
				{
					"name": "derivedfactcols"
				},
				{
					"name": "derivedbreed"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ZIP_CODE as string,",
				"          CITY_NAME as string,",
				"          STATE_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> dflocationdimupsert",
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          CITY_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     query: 'select * from PET_LICENSE_DB.STAGE.STG_PET_LICENSE limit 100\\n',",
				"     format: 'query') ~> dssfstagepetraw",
				"source(output(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          CITY_NAME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> dffactload",
				"source(output(",
				"          LOCATION_DIM_KEY as decimal(38,0),",
				"          ZIP_CODE as string,",
				"          CITY_NAME as string,",
				"          STATE_CODE as string,",
				"          COUNTRY_CODE as string,",
				"          NATURAL_KEY_HASH as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> LOCATIONDIM",
				"source(output(",
				"          BREED_DIM_KEY as decimal(38,0),",
				"          SPECIES_NAME as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          NATURAL_KEY_HASH as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table') ~> DIMBREED",
				"dflocationdimupsert derive(ZIP_N = upper(trim(ZIP_CODE)),",
				"          CITY_N = upper(trim(CITY_NAME)),",
				"          STATE_N = iif(isNull(STATE_CODE) || trim(STATE_CODE) == '', 'WA', upper(substring(trim(STATE_CODE),1,2))),",
				"          NK_HASH = md5(concat(toString(ZIP_CODE),'|',toString(CITY_NAME),'|',toString(STATE_CODE)))) ~> dfbreeddimupsert",
				"dssfstagepetraw derive(SPEC_N = upper(trim(SPECIES)),",
				"          PB_N = upper(trim(PRIMARY_BREED)),",
				"          SB_N = iif(isNull(SECONDARY_BREED) || trim(SECONDARY_BREED)=='' , 'UNKNOWN', upper(trim(SECONDARY_BREED))),",
				"          NK_HASH = iif(isNull(SECONDARY_BREED) || trim(SECONDARY_BREED)=='' , 'UNKNOWN', upper(trim(SECONDARY_BREED)))) ~> derivebreedkeys",
				"dfbreeddimupsert alterRow(upsertIf(true())) ~> alterRow",
				"dffactload derive(ISSUE_DT = toTimestamp(LICENSE_ISSUE_DATE,'MM/dd/yyyy'),",
				"          ZIP_CODE = upper(trim(ZIP_CODE)),",
				"          BREED_HASH = md5(\r",
				"  concat(\r",
				"    upper(trim(SPECIES)), '|',\r",
				"    upper(trim(PRIMARY_BREED)), '|',\r",
				"    iif(\r",
				"      isNull(SECONDARY_BREED) || trim(SECONDARY_BREED) == '',\r",
				"      'UNKNOWN',\r",
				"      upper(trim(SECONDARY_BREED))\r",
				"    )\r",
				"  )\r",
				"),",
				"          SPEC_N = toString( upper( trim( byName('SPECIES') ) ) ),",
				"          PB_N = toString( upper( trim( byName('PRIMARY_BREED') ) ) ),",
				"          SB_N = toString( upper( trim( iif(isNull(byName('SECONDARY_BREED')), '', byName('SECONDARY_BREED')) ) ) )) ~> derivedcols",
				"derivedfactcols, locnorm join({ZIP_N } == {ZIP_N_R },",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> derivefactcols",
				"derivefactcols, derivedbreed join(derivedfactcols@BREED_HASH == derivedbreed@BREED_HASH,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> BreedDim",
				"LOCATIONDIM derive({ZIP_N_R } =  toString(\r",
				"  upper(\r",
				"    trim(\r",
				"      substring(\r",
				"        replace(toString(byName('ZIP_CODE')),'-',''),\r",
				"        1,5\r",
				"      )\r",
				"    )\r",
				"  )\r",
				")\r",
				") ~> locnorm",
				"derivedcols derive(DATE_KEY = toInteger(toString(toDate(byName('LICENSE_ISSUE_DATE'), 'yyyyMMdd'))),",
				"          {SPEC_N } = toString(upper(trim(byName('SPECIES')))),",
				"          {PB_N } =  toString(upper(trim(byName('PRIMARY_BREED')))),",
				"          {ZIP_N } = toString(                upper(trim(substring(replace(toString(byName('ZIP_CODE')),'-',''),1,5)))              ),",
				"          {SB_N } = toString(upper(trim(byName('SECONDARY_BREED')))),",
				"          BREED_HASH = md5(concat(SPEC_N,'|',PB_N,'|',SB_N))\r",
				",",
				"          LICENSE_ID = toString(byName('LICENSE_NUMBER')),",
				"          PET_NAME = toString(byName('ANIMAL_NAME')),",
				"          CNT = 1) ~> derivedfactcols",
				"DIMBREED derive({SPEC_N } = upper(trim(toString(SPECIES_NAME))),",
				"          PB_N = upper(trim(toString(PRIMARY_BREED))),",
				"          {SB_N } = upper(trim(iif(isNull(SECONDARY_BREED) || trim(SECONDARY_BREED)=='' , 'UNKNOWN', SECONDARY_BREED))),",
				"          BREED_HASH = md5(\r",
				"  toString( upper(trim(byName('SPECIES_NAME'))) )\r",
				"  + '|' +\r",
				"  toString( upper(trim(byName('PRIMARY_BREED'))) )\r",
				"  + '|' +\r",
				"  toString(\r",
				"    upper(\r",
				"      trim(\r",
				"        iif(isNull(byName('SECONDARY_BREED')), '', byName('SECONDARY_BREED'))\r",
				"      )\r",
				"    )\r",
				"  )\r",
				")\r",
				") ~> derivedbreed",
				"derivebreedkeys sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LICENSE_ISSUE_DATE as string,",
				"          LICENSE_NUMBER as string,",
				"          ANIMAL_NAME as string,",
				"          SPECIES as string,",
				"          PRIMARY_BREED as string,",
				"          SECONDARY_BREED as string,",
				"          ZIP_CODE as string,",
				"          CITY_NAME as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true,",
				"     mapColumn(",
				"          LICENSE_ISSUE_DATE = PB_N,",
				"          LICENSE_NUMBER,",
				"          ANIMAL_NAME,",
				"          SPECIES = SPEC_N,",
				"          PRIMARY_BREED = PB_N,",
				"          SECONDARY_BREED = SB_N,",
				"          ZIP_CODE = NK_HASH",
				"     )) ~> sink4",
				"alterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LOCATION_DIM_KEY as decimal(38,0),",
				"          ZIP_CODE as string,",
				"          CITY_NAME as string,",
				"          STATE_CODE as string,",
				"          COUNTRY_CODE as string,",
				"          NATURAL_KEY_HASH as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> sink5",
				"BreedDim sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          LICENSE_FACT_KEY as decimal(38,0),",
				"          DATE_KEY as decimal(8,0),",
				"          LOCATION_DIM_KEY as decimal(38,0),",
				"          BREED_DIM_KEY as decimal(38,0),",
				"          LICENSE_ID as string,",
				"          PET_NAME as string,",
				"          CNT as decimal(38,0)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> sink6"
			]
		}
	}
}